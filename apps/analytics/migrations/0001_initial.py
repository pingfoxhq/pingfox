# Generated by Django 5.2.4 on 2025-07-20 11:59

import apps.analytics.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='VisitorSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pf_id', models.CharField(help_text='Unique identifier for the visitor, generated at the client side.', max_length=255, unique=True, verbose_name='PF ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the visitor session was created.', verbose_name='Created At')),
                ('last_seen', models.DateTimeField(auto_now=True, help_text='Timestamp when the visitor was last seen.', verbose_name='Last Seen')),
                ('user_agent', models.CharField(help_text="User agent string of the visitor's browser.", max_length=512, verbose_name='User Agent')),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="A human-readable label for this site (e.g. 'Personal Blog').", max_length=255, verbose_name='Name')),
                ('domain', models.CharField(help_text="The domain name for this site (e.g. 'example.com' - no protocol).", max_length=255, unique=True, verbose_name='Domain')),
                ('url', models.URLField(help_text="The full URL for this site (e.g. 'https://example.com').", max_length=255, verbose_name='URL')),
                ('site_id', models.CharField(default=apps.analytics.models.generate_site_id, help_text='A unique identifier for this site, used in URLs and API calls and for serving the JS tracking script.', max_length=24, unique=True, verbose_name='Site ID')),
                ('is_verified', models.BooleanField(default=False, help_text='Indicates whether the site has been verified by the user.', verbose_name='Is Verified')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the site is currently active and should be tracked.', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the site was created.', verbose_name='Created At')),
                ('pageview_limit_override', models.PositiveIntegerField(blank=True, help_text="An optional override for the site's pageview limit, if applicable.", null=True, verbose_name='Pageview Limit Override')),
                ('timezone', models.CharField(default='Asia/Kolkata', help_text='The timezone for this site, used for date and time display.', max_length=50, verbose_name='Timezone')),
                ('verification_token', models.CharField(default=apps.analytics.models.generate_verification_token, help_text='A unique token used to verify ownership of the site. Place this in a file at the root of your domain as ~/.well-known/pingfox-verification.txt. ', max_length=256, unique=True, verbose_name='Verification Token')),
                ('homepage_title', models.CharField(blank=True, help_text='The title to display on the homepage of this site.', max_length=255, verbose_name='Homepage Title')),
                ('favicon_url', models.URLField(blank=True, help_text='The URL of the favicon to use for this site.', verbose_name='Favicon URL')),
                ('last_indexed', models.DateTimeField(blank=True, help_text='The date and time when the site was last indexed for content.', null=True, verbose_name='Last Indexed')),
                ('owner', models.ForeignKey(help_text='The user who made this site.', on_delete=django.db.models.deletion.CASCADE, related_name='sites', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('team', models.ForeignKey(help_text='The team that owns this site.', on_delete=django.db.models.deletion.CASCADE, related_name='sites', to='accounts.team', verbose_name='Team')),
            ],
            options={
                'verbose_name': 'Site',
                'verbose_name_plural': 'Sites',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PageView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='The URL of the page that was viewed.', verbose_name='URL')),
                ('referrer', models.URLField(blank=True, help_text='The URL of the page that referred the visitor to this page.', null=True, verbose_name='Referrer')),
                ('screen_width', models.PositiveIntegerField(blank=True, help_text="The width of the visitor's screen in pixels.", null=True, verbose_name='Screen Width')),
                ('screen_height', models.PositiveIntegerField(blank=True, help_text="The height of the visitor's screen in pixels.", null=True, verbose_name='Screen Height')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='The timestamp when the page view occurred.', verbose_name='Timestamp')),
                ('site', models.ForeignKey(help_text='The site where the page view occurred.', on_delete=django.db.models.deletion.CASCADE, related_name='page_views', to='analytics.site', verbose_name='Site')),
                ('visitor', models.ForeignKey(help_text='The visitor session associated with this page view.', on_delete=django.db.models.deletion.CASCADE, related_name='page_views', to='analytics.visitorsession', verbose_name='Visitor')),
            ],
        ),
    ]
