# Generated by Django 5.2.4 on 2025-07-20 11:59

import apps.forms.models
import colorfield.fields
import django.db.models.deletion
import django_resized.forms
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('analytics', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the form.', max_length=255, verbose_name='Form Name')),
                ('slug', models.SlugField(default=apps.forms.models.generate_slug, help_text='A unique identifier for the form, used in URLs.', max_length=255, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='A brief description of the form.', null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the form was created.', verbose_name='Created At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the form is currently active.', verbose_name='Is Active')),
                ('allow_analytics', models.BooleanField(default=True, help_text='Indicates whether analytics are enabled for this form.', verbose_name='Allow Analytics')),
                ('site_id', models.CharField(blank=True, help_text='The ID of the site where this form is hosted, entered if analytics are enabled.', max_length=255, null=True, verbose_name='Site ID')),
                ('authentication_required', models.BooleanField(default=False, help_text='Indicates whether users must be authenticated to submit this form.', verbose_name='Authentication Required')),
                ('auth_key', models.CharField(default=apps.forms.models.generate_auth_key, help_text='A unique key required for authenticated form submissions.', max_length=40, unique=True, verbose_name='Authentication Key')),
                ('redirect_url', models.URLField(blank=True, help_text='URL to redirect users after form submission.', null=True, verbose_name='Redirect URL')),
                ('allow_multiple_submissions', models.BooleanField(default=True, help_text='Indicates whether users can submit this form multiple times.', verbose_name='Allow Multiple Submissions')),
                ('button_text', models.CharField(default='Submit', help_text='The text displayed on the form submission button.', max_length=255, verbose_name='Button Text')),
                ('is_locked', models.BooleanField(default=False, help_text='Indicates whether the form is locked for editing.', verbose_name='Is Locked')),
                ('owner', models.ForeignKey(help_text='The user who owns the form.', on_delete=django.db.models.deletion.CASCADE, related_name='forms', to=settings.AUTH_USER_MODEL, verbose_name='Form Owner')),
                ('team', models.ForeignKey(help_text='The team to which this form belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='forms', to='accounts.team', verbose_name='Team')),
                ('visitors', models.ManyToManyField(blank=True, help_text='Visitors who have interacted with this form.', related_name='forms', to='analytics.visitorsession', verbose_name='Visitors')),
            ],
            options={
                'verbose_name': 'Form',
                'verbose_name_plural': 'Forms',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='The label for the form field.', max_length=1024, verbose_name='Field Label')),
                ('field_type', models.CharField(choices=[('text', 'Text'), ('email', 'Email'), ('number', 'Number'), ('date', 'Date'), ('checkbox', 'Checkbox'), ('select', 'Select'), ('radio', 'Radio'), ('textarea', 'Textarea')], help_text='The type of the form field.', max_length=50, verbose_name='Field Type')),
                ('name', models.SlugField(help_text='A unique identifier for the field, used in form submissions.', max_length=1024, verbose_name='Field Name')),
                ('placeholder', models.CharField(blank=True, help_text='Placeholder text for the field.', max_length=1024, null=True, verbose_name='Placeholder')),
                ('required', models.BooleanField(default=False, help_text='Indicates whether this field is required.', verbose_name='Is Required')),
                ('readonly', models.BooleanField(default=False, help_text='Indicates whether this field is readonly.', verbose_name='Is Readonly')),
                ('hidden', models.BooleanField(default=False, help_text='Indicates whether this field is hidden from the user.', verbose_name='Is Hidden')),
                ('disabled', models.BooleanField(default=False, help_text='Indicates whether this field is disabled.', verbose_name='Is Disabled')),
                ('choices', models.CharField(blank=True, help_text='Comma-separated list of choices (for select only).', max_length=2048, null=True, verbose_name='Choices')),
                ('order', models.PositiveIntegerField(default=0, help_text='The order of the field in the form.', verbose_name='Order')),
                ('validation_regex', models.CharField(blank=True, help_text='Regular expression for validating the field input.', max_length=1024, null=True, verbose_name='Validation Regex')),
                ('help_text', models.CharField(blank=True, help_text='Additional information or instructions for the field.', max_length=1024, null=True, verbose_name='Help Text')),
                ('default_value', models.TextField(blank=True, help_text='The default value for the field, if applicable.', null=True, verbose_name='Default Value')),
                ('form', models.ForeignKey(help_text='The form to which this field belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='forms.form', verbose_name='Form')),
            ],
            options={
                'verbose_name': 'Form Field',
                'verbose_name_plural': 'Form Fields',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='FormStyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('background_color', colorfield.fields.ColorField(default='#ffffff', help_text='The background color of the form in hex format.', image_field=None, max_length=25, samples=None, verbose_name='Background Color')),
                ('text_color', colorfield.fields.ColorField(default='#000000', help_text='The text color used in the form, such as for labels and instructions.', image_field=None, max_length=25, samples=None, verbose_name='Text Color')),
                ('accent_color', colorfield.fields.ColorField(default='#f97316', help_text='The accent color used for buttons and highlights in the form.', image_field=None, max_length=25, samples=None, verbose_name='Accent Color')),
                ('button_color', colorfield.fields.ColorField(default='#f97316', help_text='The color of the form submission button.', image_field=None, max_length=25, samples=None, verbose_name='Button Color')),
                ('button_text_color', colorfield.fields.ColorField(default='#ffffff', help_text='The text color of the form submission button.', image_field=None, max_length=25, samples=None, verbose_name='Button Text Color')),
                ('font_family', models.CharField(choices=[('system', 'System Default'), ('inter', 'Inter'), ('dyslexic', 'OpenDyslexic'), ('serif', 'Serif'), ('mono', 'Monospace'), ('sans-serif', 'Sans-Serif')], default='Arial, sans-serif', help_text='The font family used in the form.', max_length=100, verbose_name='Font Family')),
                ('logo', django_resized.forms.ResizedImageField(blank=True, crop=['middle', 'center'], force_format=None, help_text='The logo image for the form.', keep_meta=True, null=True, quality=90, scale=None, size=[300, 100], upload_to='form_logos/', verbose_name='Logo')),
                ('custom_css', models.TextField(blank=True, help_text='Custom CSS styles for the form.', null=True, verbose_name='Custom CSS')),
                ('form', models.OneToOneField(help_text='The form to which this style belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='style', to='forms.form', verbose_name='Form')),
            ],
            options={
                'verbose_name': 'Form Style',
                'verbose_name_plural': 'Form Styles',
            },
        ),
        migrations.CreateModel(
            name='FormSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the form was submitted.', verbose_name='Submitted At')),
                ('data', models.JSONField(help_text='The data submitted in the form.', verbose_name='Submission Data')),
                ('form', models.ForeignKey(help_text='The form to which this submission belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='forms.form', verbose_name='Form')),
            ],
            options={
                'verbose_name': 'Form Submission',
                'verbose_name_plural': 'Form Submissions',
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.AddIndex(
            model_name='form',
            index=models.Index(fields=['slug'], name='forms_form_slug_64e4aa_idx'),
        ),
        migrations.AddIndex(
            model_name='form',
            index=models.Index(fields=['owner'], name='forms_form_owner_i_009fd7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='form',
            unique_together={('owner', 'slug')},
        ),
    ]
